# Pipeline for standard 3-stage (develop, staging, production) deployment.
# Assumed branch model is "slightly modified" git-flow.
#   'develop' branch:
#     development branch. feature branches would be merged to it.
#   'release' branch:
#     as not git-flow, 'release' branch lives forever.
#     as git-flow, release operation will be performed here.
#     this pipeline supports to committing:
#       - release version to release branch just before releasing to production
#         (actually commit it on master branch first and merge it to release branch)
#       - next development version to release branch after releasing to production.
#         (this commit will be merged to develop branch finaly)
#   'master' branch:
#     commits on master branch should be
#       - released to production
#       - tagged with release version



# groups:
#   - name: develop
#     jobs:
#       - test-develop
#       - deploy-develop
#   - name: staging
#     jobs:
#       - test-release
#       - deploy-staging
#   - name: release
#     jobs:
#       - merge-release-to-master
#       # - test-master
#       - tag-master
#       - deploy-prod
#       - bump-version
#       - merge-release-to-develop
#   - name: bump-versions
#     jobs:
#       - bump-major
#       - bump-minor
#   - name: sbt-ivy-cache
#     jobs:
#       - init-sbt-ivy-cache
#       - update-sbt-ivy-cache



resources:
  - name: repo-develop
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: develop
      private_key: {{github-private-key}}
    check_every: 10s
  # 'release' branch is assumes to exists always.
  # this is diffrent from standard git-flow
  - name: repo-release
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: release
      private_key: {{github-private-key}}
    check_every: 10s
  - name: repo-master
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: master
      private_key: {{github-private-key}}
      # mastser should process all commits
      # that means this resource will ignore commit with
      # messages containing [ci skip].
      # [ci skip] prevents from unnecessary triggers on test-develop
      # and test-release when some release commit will be merged on
      # these branch.
      disable_ci_skip: true
    check_every: 10s
  - name: version
    type: semver
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: version
      private_key: {{github-private-key}}
      file: version
      driver: git
      initial_version: 0.0.0
  - name: sbt-ivy-cache
    type: docker-image
    source:
      repository: {{sbt-ivy-cache-repo}}
      username: {{docker-hub-username}}
      password: {{docker-hub-password}}
      email: {{docker-hub-email}}
  # we need these two extra repo-???-push resource to ignore
  # [ci skip] commits on normal repo-??? resources above.
  # see: https://github.com/concourse/git-resource/issues/18#issuecomment-208971885
  - name: repo-develop-push
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: develop
      private_key: {{github-private-key}}
      disable_ci_skip: true
    check_every: 10s
  - name: repo-release-push
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: release
      private_key: {{github-private-key}}
      disable_ci_skip: true
    check_every: 10s
  # general repo resource for sbt-ivy-cache
  # pipeline-view on web would be more messy when when repo-develop was re-used
  - name: repo
    type: git
    source:
      uri: git@github.com:everpeace/akka-http-microservice
      branch: develop
      private_key: {{github-private-key}}
    check_every: 10s



jobs:
  # continuous integration for develop branch
  - name: test-develop
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-develop
          trigger: true
        - get: sbt-ivy-cache
      - task: unit
        file: repo/ci/tasks/unit.yml

  - name: deploy-develop
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-develop
          passed: [ test-develop ]
          trigger: true
        - get: sbt-ivy-cache
      - task: publish-docker-image
        file: repo/ci/tasks/build-docker-image.yml
        # params:
        # DOCKER_REGISTORY: hogehoge
      - task: deploy-to-dev-kube
        file: repo/ci/tasks/deploy-to-kube.yml
        params:
          KUBE_SERVER: hogehoge
          KUBE_NAMESPACE: hogehoge
          KUBE_USER: hogehoge
          KUBE_PASS: hoge
          MANIFEST_PATH: repo/manifest.yml


  # verification for release on staging environemnt
  # it assumes that merging 'develop' to 'release' will be performed manually
  # by the team.
  - name: test-release
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-release
          trigger: true
        - get: sbt-ivy-cache
      - task: unit
        file: repo/ci/tasks/unit.yml

  - name: deploy-staging
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-release
          passed: [ test-release ]
          trigger: true
        - get: sbt-ivy-cache
      - task: publish-docker-image
        file: repo/ci/tasks/build-docker-image.yml
        # params:
        #   DOCKER_REGISTORY: hogehoge
      - task: deploy-to-dev-kube
        file: repo/ci/tasks/deploy-to-kube.yml
        params:
          KUBE_SERVER: hogehoge
          KUBE_NAMESPACE: hogehoge
          KUBE_USER: hogehoge
          KUBE_PASS: hoge
          MANIFEST_PATH: repo/manifest.yml


  # This job should executed manually.
  # Deployment to production flow starts here.
  # When team decides to release current release braanch
  # team should execute this job manually.
  - name: merge-release-to-master
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-master
        - get: repo-release
          passed: [ test-release ]
      - task: merge-release-to-master
        file: repo-release/ci/tasks/merge-release-branch_repo.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo
        resource: repo-master
        params:
          repository: out

  # - name: test-master
  #   serial: true
  #   plan:
  #     - aggregate:
  #       - get: repo
  #         resource: repo-master
  #         # comment out bellow to support hotfix
  #         # passed: [ merge-release-to-master ]
  #         trigger: true
  #       - get: sbt-ivy-cache
  #     - task: unit
  #       file: repo/ci/tasks/unit.yml

  # Commiting "Realease version" with [ci skip] on master branch
  # and then push and tag it.
  - name: tag-master
    serial: true
    plan:
      - aggregate:
        - get:  repo
          resource: repo-master
          passed: [ merge-release-to-master ]
          trigger: true
        - get: repo-release
        - get: version
      - task: bump-to-release-version
        file: repo-release/ci/tasks/bump-to-release-version.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo
        resource: repo-master
        params:
          repository: out
          tag: version/number

  # build artififacts and deploy it to production
  - name: deploy-prod
    serial: true
    plan:
      - aggregate:
        - get:  repo
          resource: repo-master
          passed: [ tag-master ]
          trigger: true
        - get: sbt-ivy-cache
      - task: publish-docker-image
        file: repo/ci/tasks/build-docker-image.yml
        # params:
        #   DOCKER_REGISTORY: hogehoge
      - task: deploy-to-dev-kube
        file: repo/ci/tasks/deploy-to-kube.yml
        params:
          KUBE_SERVER: hogehoge
          KUBE_NAMESPACE: hogehoge
          KUBE_USER: hogehoge
          KUBE_PASS: hoge
          MANIFEST_PATH: repo/manifest.yml

  # Preparation for next release.
  # - Merging master branch to release branch (merging "release commit").
  # - Committing "next development version(-SNAPSHOT)" on release branch
  #   and push it.
  # - this job always bumps patch version (bumping Z in x.y.Z)
  #   when team needs to bump minor/major version.
  #   bump-minor/major job should be executed manually.
  - name: bump-version
    serial: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get:  repo-master
          passed: [ tag-master ]
          trigger: true
        - get: repo
          resource: repo-release-push
        - get: version
          params: {bump: patch}
      - task: bump-to-next-develop-version
        file: repo-master/ci/tasks/bump-to-next-develop-version.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo
        resource: repo-release-push
        params:
          repository: out
      - put: version
        params: {file: version/number}

  # Merging "next development version" commit on release branch
  # to develop branch
  - name: merge-release-to-develop
    serial: true
    plan:
      - aggregate:
        - get: repo
          resource: repo-develop-push
        - get: repo-release
          resource: repo-release-push
          passed: [ bump-version ]
          trigger: true
      - task: merge-release-to-develop
        file: repo-release/ci/tasks/merge-release-branch_repo.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo
        resource: repo-develop-push
        params:
          repository: out


  # Bumping minor version manually (Y in x.Y.z).
  # - Bumping minor version on release branch and push it.
  #   (release preparation should be occured in release branch)
  # - Merging the bump to develop branch.
  - name: bump-minor
    serial: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get: version
          params: {bump: minor}
        - get: repo-release
          resource: repo-release-push
        - get: repo-develop
          resource: repo-develop-push
      - task: bump-to-next-develop-version
        file: repo-release/ci/tasks/bump-to-next-develop-version-no_merge_master.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - task: merge-release-to-develop
        file: repo-release/ci/tasks/merge-release-branch_repo-develop.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo-develop
        resource: repo-develop-push
        params:
          repository: out
      - put: version
        params: {file: version/number}

  # Bumping major version manually (X in X.y.z).
  # - Bumping major version on release branch and push it.
  #   (release preparation should be occured in release branch)
  # - Merging the bump to develop branch.
  - name: bump-major
    serial: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get: version
          params: {bump: major}
        - get: repo-release
          resource: repo-release-push
        - get: repo-develop
          resource: repo-develop-push
      - task: bump-to-next-develop-version
        file: repo-release/ci/tasks/bump-to-next-develop-version-no_merge_master.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo-release
        resource: repo-release-push
        params:
          repository: out
      - task: merge-release-to-develop
        file: repo-release/ci/tasks/merge-release-branch_repo-develop.yml
        params:
          GIT_EMAIL: {{git-email}}
          GIT_NAME: {{git-name}}
      - put: repo-develop
        resource: repo-develop-push
        params:
          repository: out
      - put: version
        params: {file: version/number}

  # manual job for sbt and ivy cache management(init and update)
  - name: init-sbt-ivy-cache
    plan:
    - get: repo
      resource: repo
    - task: initialize-sbt-ivy-cache
      file: repo/ci/tasks/sbt-ivy-cache.yml
    - put: sbt-ivy-cache
      params:
        import_file: to-push/rootfs.tar
  - name: update-sbt-ivy-cache
    plan:
      - aggregate:
        - get: repo
          resource: repo
        - get: sbt-ivy-cache
      - task: build-sbt-ivy-cache
        file: repo/ci/tasks/sbt-ivy-cache.yml
      - put: sbt-ivy-cache
        params:
          import_file: to-push/rootfs.tar
